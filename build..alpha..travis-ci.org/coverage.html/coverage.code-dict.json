{"/home/travis/build/npmtest/node-npmtest-generator-backbone/test.js":"/* istanbul instrument in package npmtest_generator_backbone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/lib.npmtest_generator_backbone.js":"/* istanbul instrument in package npmtest_generator_backbone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_backbone = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_backbone = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-backbone && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_backbone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_backbone\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_backbone.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_backbone.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_backbone.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_backbone.__dirname + '/lib.npmtest_generator_backbone.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/app/index.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar ejs = require('ejs');\nvar htmlWiring = require('html-wiring');\nvar mkdirp = require('mkdirp');\nvar pascalCase = require('pascal-case');\nvar paramCase = require('param-case');\nvar yeoman = require('yeoman-generator');\n\nvar BackboneGenerator = yeoman.generators.Base.extend({\n  constructor: function () {\n    yeoman.generators.Base.apply(this, arguments);\n\n    this.option('appPath', {\n      desc: 'Name of application directory',\n      type: 'String',\n      defaults: 'app',\n      banner: 'some banner'\n    });\n\n    this.option('requirejs', {\n      desc: 'Support requirejs',\n      defaults: false\n    });\n\n    this.option('template-framework', {\n      desc: 'Choose template framework. lodash/handlebars/mustache',\n      type: 'String',\n      defaults: 'lodash'\n    });\n\n    this.option('test-framework', {\n      desc: 'Choose test framework. mocha/jasmine',\n      type: 'String',\n      defaults: 'mocha'\n    });\n\n    this.option('skip-install', {\n      desc: 'Skip the bower and node installations',\n      defaults: false\n    });\n\n    this.argument('app_name', { type: String, required: false });\n    this.appname = this.app_name || this.appname;\n    this.appname = pascalCase(this.appname);\n\n    this.env.options.appPath = this.options.appPath || 'app';\n    this.config.set('appPath', this.env.options.appPath);\n\n    this.testFramework = this.options['test-framework'] || 'mocha';\n    this.templateFramework = this.options['template-framework'] || 'lodash';\n\n    this.config.defaults({\n      appName: this.appname,\n      ui: this.options.ui,\n      coffee: this.options.coffee,\n      testFramework: this.testFramework,\n      templateFramework: this.templateFramework,\n      sassBootstrap: this.sassBootstrap,\n      includeRequireJS: this.includeRequireJS\n    });\n\n    this.indexFile = htmlWiring.readFileAsString(this.templatePath('index.html'));\n  },\n\n  prompting: function () {\n    var cb = this.async();\n\n    // welcome message\n    this.log(this.yeoman);\n    this.log('Out of the box I include HTML5 Boilerplate, jQuery and Backbone.js.');\n\n    var prompts = [{\n      type: 'checkbox',\n      name: 'features',\n      message: 'What more would you like?',\n      choices: [{\n        name: 'Twitter Bootstrap for Sass',\n        value: 'sassBootstrap',\n        checked: true\n      }, {\n        name: 'Use CoffeeScript',\n        value: 'coffee',\n        checked: this.options.coffee || false\n      }, {\n        name: 'Use RequireJS',\n        value: 'requirejs',\n        checked: this.options.requirejs || false\n      }, {\n        name: 'Use Modernizr',\n        value: 'modernizr',\n        checked: false\n      }]\n    }];\n\n    this.prompt(prompts, function (answers) {\n      var features = answers.features;\n\n      function hasFeature(feat) { return features.indexOf(feat) !== -1; }\n\n      // manually deal with the response, get back and store the results.\n      // we change a bit this way of doing to automatically do this in the self.prompt() method.\n      this.sassBootstrap = hasFeature('sassBootstrap');\n      this.includeRequireJS = hasFeature('requirejs');\n      this.includeModernizr = hasFeature('modernizr');\n      this.config.set('sassBootstrap', this.sassBootstrap);\n\n\n      if (!this.options.coffee) {\n        this.options.coffee = hasFeature('coffee');\n        this.config.set('coffee', this.options.coffee);\n      }\n\n      if (!this.options.requirejs) {\n        this.options.requirejs = this.includeRequireJS;\n        this.config.set('includeRequireJS', this.includeRequireJS);\n      }\n      cb();\n    }.bind(this));\n  },\n\n  writing: {\n\n    git: function () {\n      this.fs.copyTpl(\n        this.templatePath('gitignore'),\n        this.destinationPath('.gitignore'),\n        {\n          appPath: this.env.options.appPath\n        }\n      );\n      this.fs.copyTpl(\n        this.templatePath('gitattributes'),\n        this.destinationPath('.gitattributes')\n      );\n    },\n\n    bower: function () {\n      this.fs.copyTpl(\n        this.templatePath('bowerrc'),\n        this.destinationPath('.bowerrc'),\n        {\n          appPath: this.env.options.appPath\n        }\n      );\n      this.fs.copyTpl(\n        this.templatePath('_bower.json'),\n        this.destinationPath('bower.json'),\n        {\n          appSlugName: paramCase(this.appname),\n          sassBootstrap: this.sassBootstrap,\n          includeRequireJS: this.includeRequireJS,\n          includeModernizr: this.includeModernizr,\n          templateFramework: this.templateFramework\n        }\n      );\n    },\n\n    jshint: function () {\n      this.fs.copyTpl(\n        this.templatePath('jshintrc'),\n        this.destinationPath('.jshintrc'),\n        {\n          appName: this.appname,\n          appSlugName: paramCase(this.appname),\n          includeRequireJS: this.includeRequireJS\n        }\n      );\n    },\n\n    editorConfig: function () {\n      this.fs.copyTpl(\n        this.templatePath('editorconfig'),\n        this.destinationPath('.editorconfig')\n      );\n    },\n\n    gruntfile: function () {\n      this.fs.copyTpl(\n        this.templatePath('Gruntfile.js'),\n        this.destinationPath('Gruntfile.js'),\n        {\n          appPath: this.env.options.appPath,\n          hasCoffee: this.options.coffee,\n          includeRequireJS: this.includeRequireJS,\n          sassBootstrap: this.sassBootstrap,\n          templateFramework: this.templateFramework,\n          testFramework: this.testFramework\n        }\n      );\n    },\n\n    packageJSON: function () {\n      this.fs.copyTpl(\n        this.templatePath('_package.json'),\n        this.destinationPath('package.json'),\n        {\n          hasCoffee: this.options.coffee,\n          includeRequireJS: this.includeRequireJS,\n          sassBootstrap: this.sassBootstrap,\n          templateFramework: this.templateFramework,\n          testFramework: this.testFramework\n        }\n      );\n    },\n\n    mainStylesheet: function () {\n      var contentText = [\n        'body {\\n    background: #fafafa;\\n}',\n        '\\n.hero-unit {\\n    margin: 50px auto 0 auto;\\n    width: 300px;\\n}'\n      ];\n      var ext = '.css';\n      if (this.sassBootstrap) {\n        this.fs.copyTpl(\n          this.templatePath('main.scss'),\n          this.destinationPath(this.env.options.appPath + '/styles/main.scss')\n        );\n        return;\n      }\n      this.fs.write(\n        this.destinationPath(this.env.options.appPath + '/styles/main' + ext),\n        contentText.join('\\n')\n      );\n    },\n\n    writeIndex: function () {\n      if (this.includeRequireJS) {\n        return;\n      }\n\n      this.indexFile = htmlWiring.readFileAsString(this.templatePath('index.html'));\n      this.indexFile = ejs.render(\n        this.indexFile,\n        {\n          appName: this.appname,\n          includeModernizr: this.includeModernizr,\n          includeRequireJS: this.includeRequireJS,\n          sassBootstrap: this.sassBootstrap\n        }\n      );\n\n      var vendorJS = [\n        'bower_components/jquery/dist/jquery.js',\n        'bower_components/lodash/dist/lodash.compat.js',\n        'bower_components/backbone/backbone.js'\n      ];\n\n      if (this.templateFramework === 'handlebars') {\n        vendorJS.push('bower_components/handlebars/handlebars.js');\n      }\n\n      this.indexFile = htmlWiring.appendScripts(this.indexFile, 'scripts/vendor.js', vendorJS);\n\n      if (this.sassBootstrap) {\n        // wire Twitter Bootstrap plugins\n        this.indexFile = htmlWiring.appendScripts(this.indexFile, 'scripts/plugins.js', [\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/affix.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/alert.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/button.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/carousel.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/collapse.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/dropdown.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/modal.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/tooltip.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/popover.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/scrollspy.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/tab.js',\n          'bower_components/bootstrap-sass-official/assets/javascripts/bootstrap/transition.js'\n        ]);\n      }\n\n      this.indexFile = htmlWiring.appendFiles({\n        html: this.indexFile,\n        fileType: 'js',\n        searchPath: ['.tmp', this.env.options.appPath],\n        optimizedPath: 'scripts/main.js',\n        sourceFileList: [\n          'scripts/main.js',\n          'scripts/templates.js'\n        ]\n      });\n    },\n\n    writeIndexWithRequirejs: function () {\n      if (!this.includeRequireJS) {\n        return;\n      }\n      this.indexFile = htmlWiring.readFileAsString(this.templatePath('index.html'));\n      this.indexFile = ejs.render(\n        this.indexFile,\n        {\n          appName: this.appname,\n          includeModernizr: this.includeModernizr,\n          includeRequireJS: this.includeRequireJS,\n          sassBootstrap: this.sassBootstrap\n        }\n      );\n    },\n\n    setupEnv: function () {\n      mkdirp.sync(\n        this.templatePath(this.env.options.appPath)\n      );\n      mkdirp.sync(\n        this.templatePath(this.env.options.appPath + '/scripts')\n      );\n      mkdirp.sync(\n        this.templatePath(this.env.options.appPath + '/scripts/vendor/')\n      );\n      mkdirp.sync(\n        this.templatePath(this.env.options.appPath + '/styles')\n      );\n      mkdirp.sync(\n        this.templatePath(this.env.options.appPath + '/images')\n      );\n      this.fs.copyTpl(\n        this.templatePath('app/404.html'),\n        this.destinationPath(this.env.options.appPath + '/404.html')\n      );\n      this.fs.copyTpl(\n        this.templatePath('app/favicon.ico'),\n        this.destinationPath(this.env.options.appPath + '/favicon.ico')\n      );\n      this.fs.copyTpl(\n        this.templatePath('app/robots.txt'),\n        this.destinationPath(this.env.options.appPath + '/robots.txt')\n      );\n      this.fs.write(\n        this.destinationPath(path.join(this.env.options.appPath, '/index.html')),\n        this.indexFile\n      );\n    },\n\n    createRequireJsAppFile: function () {\n      if (!this.includeRequireJS) {\n        return;\n      }\n      this._writeTemplate(\n        'requirejs_app',\n        this.env.options.appPath + '/scripts/main',\n        {\n          sassBootstrap: this.sassBootstrap,\n          templateFramework: this.templateFramework\n        }\n      );\n    },\n\n    createAppFile: function () {\n      if (this.includeRequireJS) {\n        return;\n      }\n      this._writeTemplate(\n        'app',\n        this.env.options.appPath + '/scripts/main',\n        {\n          appSlugName: paramCase(this.appname)\n        }\n      );\n    },\n\n    composeTest: function () {\n      if (['backbone:app', 'backbone'].indexOf(this.options.namespace) >= 0) {\n        this.composeWith(this.testFramework, {\n          'skip-install': this.options['skip-install'],\n          'ui': this.options.ui,\n          'skipMessage': true,\n        });\n      }\n    }\n  },\n\n  setSuffix: function () {\n    this.scriptSuffix = '.js';\n\n    if (this.env.options.coffee || this.options.coffee) {\n      this.scriptSuffix = '.coffee';\n    }\n  },\n\n  _writeTemplate: function (source, destination, data) {\n    if (typeof source === 'undefined' || typeof destination === 'undefined') {\n      return;\n    }\n\n    if (typeof this.scriptSuffix === 'undefined') {\n      this.setSuffix();\n    }\n\n    var ext = this.scriptSuffix;\n    this.fs.copyTpl(\n      this.templatePath(source + ext),\n      this.destinationPath(destination + ext),\n      data\n    );\n  },\n\n  install: function () {\n    var shouldInstall = !this.options['skip-install'];\n    var isInstallable = ['backbone:app', 'backbone'].indexOf(this.options.namespace) > -1;\n    if (shouldInstall && isInstallable) {\n      this.npmInstall();\n      this.bowerInstall('', {\n        'config.cwd': this.destinationPath('.'),\n        'config.directory': path.join(this.config.get('appPath'), 'bower_components')\n      });\n    }\n  }\n});\n\nmodule.exports = BackboneGenerator;\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/script-base.js":"'use strict';\nvar path = require('path');\nvar util = require('util');\nvar yeoman = require('yeoman-generator');\nvar backboneUtils = require('./util.js');\n\nvar ScriptBase = yeoman.generators.NamedBase.extend({\n  constructor: function (name) {\n    yeoman.generators.NamedBase.apply(this, arguments);\n\n    this.appname = this.config.get('appName') || path.basename(process.cwd());\n    this.env.options.appPath = this.config.get('appPath') || 'app';\n\n    this.options.coffee = this.config.get('coffee') || false;\n\n    if (typeof this.env.options.coffee === 'undefined') {\n      this.env.options.coffee = this.options.coffee;\n    }\n\n    // check if --requirejs option provided or if require is setup\n    if (typeof this.env.options.requirejs === 'undefined') {\n      this.option('requirejs');\n\n      this.options.requirejs = this.config.get('includeRequireJS') || false;\n\n      this.env.options.requirejs = this.options.requirejs;\n    }\n\n  },\n\n  _addScriptToIndex: function (script) {\n    try {\n      var appPath = this.env.options.appPath;\n      var fullPath = this.destinationPath(path.join(appPath, 'index.html'));\n\n      backboneUtils.rewriteFile({\n        file: fullPath,\n        needle: '<!-- endbuild -->',\n        splicable: [\n          '<script src=\"scripts/' + script + '.js\"></script>'\n        ]\n      });\n    } catch (e) {\n      this.log('\\n Unable to find ' + fullPath + '. Reference to ' + script + '.js ' + 'not added.\\n');\n    }\n  },\n\n  _setupSourceRootAndSuffix: function () {\n    var sourceRoot = '/generators/templates';\n    this.scriptSuffix = '.js';\n\n    if (this.env.options.coffee || this.options.coffee) {\n      sourceRoot = '/generators/templates/coffeescript';\n      this.scriptSuffix = '.coffee';\n    }\n\n    if (this.env.options.requirejs || this.options.requirejs) {\n      sourceRoot += '/requirejs';\n    }\n\n    this.sourceRoot(path.join(__dirname, sourceRoot));\n  },\n\n  _writeTemplate: function (source, destination, data) {\n\n    this._setupSourceRootAndSuffix();\n    var ext = this.scriptSuffix;\n    this.fs.copyTpl(\n      this.templatePath(source + ext),\n      this.destinationPath(destination + ext),\n      data\n    );\n  },\n\n  _canGenerateTests: function () {\n    return this.config.get('testFramework') === 'mocha' && !this.config.get('includeRequireJS');\n  },\n\n  _generateTest: function (type) {\n    if (this._canGenerateTests()) {\n      this.composeWith('backbone-mocha:' + type, { arguments: [this.name] }, {\n        coffee: this.config.get('coffee'),\n        ui: this.config.get('ui')\n      });\n    }\n  }\n});\n\nmodule.exports = ScriptBase;\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/util.js":"'use strict';\nvar path = require('path');\nvar fs = require('fs');\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n}\n\nfunction rewrite(args) {\n  // check if splicable is already in the body text\n  var re = new RegExp(args.splicable.map(function (line) {\n    return '\\s*' + escapeRegExp(line);\n  })\n  .join('\\n'));\n\n  if (re.test(args.haystack)) {\n    return args.haystack;\n  }\n\n  var lines = args.haystack.split('\\n');\n\n  var otherwiseLineIndex = 0;\n  lines.forEach(function (line, i) {\n    if (line.indexOf(args.needle) !== -1) {\n      otherwiseLineIndex = i;\n    }\n  });\n\n  var spaces = 0;\n  while (lines[otherwiseLineIndex].charAt(spaces) === ' ') {\n    spaces += 1;\n  }\n\n  var spaceStr = '';\n  while ((spaces -= 1) >= 0) {\n    spaceStr += ' ';\n  }\n\n  lines.splice(otherwiseLineIndex, 0, args.splicable.map(function (line) {\n    return spaceStr + line;\n  }).join('\\n'));\n\n  return lines.join('\\n');\n}\n\nfunction rewriteFile(args) {\n  args.haystack = fs.readFileSync(args.file, 'utf8');\n  var body = rewrite(args);\n\n  fs.writeFileSync(args.file, body);\n}\n\nmodule.exports = {\n  rewrite: rewrite,\n  rewriteFile: rewriteFile\n};\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/all/index.js":"var path = require('path');\nvar util = require('util');\nvar mkdirp = require('mkdirp');\nvar yeoman = require('yeoman-generator');\nvar pascalCase = require('pascal-case');\n\nvar BackboneGenerator = yeoman.generators.Base.extend({\n  constructor: function () {\n    yeoman.generators.Base.apply(this, arguments);\n\n    this.argument('app_name', { type: String, required: false });\n    this.appname = this.app_name || this.appname;\n    this.appname = pascalCase(this.appname);\n\n    this.env.options.appPath = this.options.appPath || 'app';\n    this.config.set('appPath', this.env.options.appPath);\n\n    this.dirs = 'models collections views routes helpers templates'.split(' ');\n\n    this.option('coffee');\n\n    this.args = [this.appname];\n\n    this.option('coffee');\n    this.env.options.appPath = this.options.appPath || 'app';\n    this.config.set('appPath', this.env.options.appPath);\n\n    this.args = ['application'];\n\n    if (this.options.coffee) {\n      this.args.push('--coffee');\n    }\n\n    this.option('requirejs');\n\n    if (this.options.requirejs) {\n      this.args.push('--requirejs');\n    }\n\n    if (this.options['template-framework']) {\n      this.env.options['template-framework'] = this.options['template-framework'];\n    }\n\n    this.testFramework = this.options['test-framework'] || 'mocha';\n\n    this.on('end', function () {\n      if (/^.*test$/.test(process.cwd())) {\n        process.chdir('..');\n      }\n      this.installDependencies({ skipInstall: this.options['skip-install'] });\n    });\n  },\n\n  writing: {\n    createDirLayout: function () {\n      var done = this.async();\n      this.dirs.forEach(function (dir) {\n        this.log.create('app/scripts/' + dir);\n        mkdirp(path.join('app/scripts', dir), done);\n      }.bind(this));\n    }\n  },\n\n  install: function () {\n    this.composeWith('backbone:router', {arguments: this.args});\n    this.composeWith('backbone:view', {arguments: this.args});\n    this.composeWith('backbone:model', {arguments: this.args});\n    this.composeWith('backbone:collection', {arguments: this.args});\n  }\n});\n\nmodule.exports = BackboneGenerator;\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/templates/collection.js":"/*global <%= appClassName %>, Backbone*/\n\n<%= appClassName %>.Collections = <%= appClassName %>.Collections || {};\n\n(function () {\n  'use strict';\n\n  <%= appClassName %>.Collections.<%= className %> = Backbone.Collection.extend({\n\n    model: <%= appClassName %>.Models.<%= className %>\n\n  });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/templates/model.js":"/*global <%= appClassName %>, Backbone*/\n\n<%= appClassName %>.Models = <%= appClassName %>.Models || {};\n\n(function () {\n  'use strict';\n\n  <%= appClassName %>.Models.<%= className %> = Backbone.Model.extend({\n\n    url: '',\n\n    initialize: function() {\n    },\n\n    defaults: {\n    },\n\n    validate: function(attrs, options) {\n    },\n\n    parse: function(response, options)  {\n      return response;\n    }\n  });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/templates/router.js":"/*global <%= appClassName %>, Backbone*/\n\n<%= appClassName %>.Routers = <%= appClassName %>.Routers || {};\n\n(function () {\n  'use strict';\n\n  <%= appClassName %>.Routers.<%= className %> = Backbone.Router.extend({\n\n  });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/templates/view.js":"/*global <%= appClassName %>, Backbone, JST*/\n\n<%= appClassName %>.Views = <%= appClassName %>.Views || {};\n\n(function () {\n  'use strict';\n\n  <%= appClassName %>.Views.<%= className %> = Backbone.View.extend({\n\n    template: JST['<%= jst_path %>'],\n\n    tagName: 'div',\n\n    id: '',\n\n    className: '',\n\n    events: {},\n\n    initialize: function () {\n      this.listenTo(this.model, 'change', this.render);\n    },\n\n    render: function () {\n      this.$el.html(this.template(this.model.toJSON()));\n    }\n\n  });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/app/templates/app.js":"/*global <%= appSlugName %>, $*/\n\n\nwindow.<%= appSlugName %> = {\n  Models: {},\n  Collections: {},\n  Views: {},\n  Routers: {},\n  init: function () {\n    'use strict';\n    console.log('Hello from Backbone!');\n  }\n};\n\n$(document).ready(function () {\n  'use strict';\n  <%= appSlugName %>.init();\n});\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/app/templates/Gruntfile.js":"'use strict';\nvar LIVERELOAD_PORT = 35729;\nvar SERVER_PORT = 9000;\nvar lrSnippet = require('connect-livereload')({port: LIVERELOAD_PORT});\nvar mountFolder = function (connect, dir) {\n  return connect.static(require('path').resolve(dir));\n};\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to match all subfolders:\n// 'test/spec/**/*.js'\n// templateFramework: '<%= templateFramework %>'\n\nmodule.exports = function (grunt) {\n\n  // show elapsed time at the end\n  require('time-grunt')(grunt);\n\n  // Automatically load required Grunt tasks\n  require('jit-grunt')(grunt, {\n    useminPrepare: 'grunt-usemin'\n  });\n\n  // configurable paths\n  var yeomanConfig = {\n    app: '<%= appPath %>',\n    dist: 'dist'\n  };\n\n  grunt.initConfig({\n    yeoman: yeomanConfig,\n    watch: {\n      options: {\n        nospawn: true,\n        livereload: LIVERELOAD_PORT\n      },<% if (hasCoffee) { %>\n      coffee: {\n        files: ['<%%= yeoman.app %>/scripts/{,*/}*.coffee'],\n        tasks: ['coffee:dist']\n      },\n      coffeeTest: {\n        files: ['test/spec/{,*/}*.coffee'],\n        tasks: ['coffee:test']\n      },<% } %><% if (sassBootstrap) { %>\n      sass: {\n        files: ['<%%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n        tasks: ['sass:server']\n      },<% } %>\n      livereload: {\n        options: {\n          livereload: grunt.option('livereloadport') || LIVERELOAD_PORT\n        },\n        files: [\n          '<%%= yeoman.app %>/*.html',\n          '{.tmp,<%%= yeoman.app %>}/styles/{,*/}*.css',\n          '{.tmp,<%%= yeoman.app %>}/scripts/{,*/}*.js',\n          '<%%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp}',\n          '<%%= yeoman.app %>/scripts/templates/*.{ejs,mustache,hbs}',\n          'test/spec/**/*.js'\n        ]\n      }<% if (templateFramework === 'mustache') { %>,\n      mustache: {\n        files: [\n          '<%%= yeoman.app %>/scripts/templates/*.mustache'\n        ],\n        tasks: ['mustache']\n      }<% } else if (templateFramework === 'handlebars') { %>,\n      handlebars: {\n        files: [\n          '<%%= yeoman.app %>/scripts/templates/*.hbs'\n        ],\n        tasks: ['handlebars']\n      }<% } else { %>,\n      jst: {\n        files: [\n          '<%%= yeoman.app %>/scripts/templates/*.ejs'\n        ],\n        tasks: ['jst']\n      }<% } %>,\n      test: {\n        files: ['<%%= yeoman.app %>/scripts/{,*/}*.js', 'test/spec/**/*.js'],\n        tasks: ['test:true']\n      }\n    },\n    connect: {\n      options: {\n        port: grunt.option('port') || SERVER_PORT,\n        // change this to '0.0.0.0' to access the server from outside\n        hostname: 'localhost'\n      },\n      livereload: {\n        options: {\n          middleware: function (connect) {\n            return [\n              lrSnippet,\n              mountFolder(connect, '.tmp'),\n              mountFolder(connect, yeomanConfig.app)\n            ];\n          }\n        }\n      },\n      test: {\n        options: {\n          port: 9001,\n          middleware: function (connect) {\n            return [\n              mountFolder(connect, 'test'),\n              lrSnippet,\n              mountFolder(connect, '.tmp'),\n              mountFolder(connect, yeomanConfig.app)\n            ];\n          }\n        }\n      },\n      dist: {\n        options: {\n          middleware: function (connect) {\n            return [\n              mountFolder(connect, yeomanConfig.dist)\n            ];\n          }\n        }\n      }\n    },\n    open: {\n      server: {\n        path: 'http://localhost:<%%= connect.options.port %>'\n      },\n      test: {\n        path: 'http://localhost:<%%= connect.test.options.port %>'\n      }\n    },\n    clean: {\n      dist: ['.tmp', '<%%= yeoman.dist %>/*'],\n      server: '.tmp'\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n        reporter: require('jshint-stylish')\n      },\n      all: [\n        'Gruntfile.js',\n        '<%%= yeoman.app %>/scripts/{,*/}*.js',\n        '!<%%= yeoman.app %>/scripts/vendor/*',\n        'test/spec/{,*/}*.js'\n      ]\n    },\n<% if (testFramework === 'mocha') { -%>\n    mocha: {\n      all: {\n        options: {\n          run: true,\n          urls: ['http://localhost:<%%= connect.test.options.port %>/index.html']\n        }\n      }\n    },\n<% } else { -%>\n    jasmine: {\n      all:{\n        src : '<%%= yeoman.app %>/scripts/{,*/}*.js',\n        options: {\n          keepRunner: true,\n          specs : 'test/spec/**/*.js',\n          vendor : [\n            '<%%= yeoman.app %>/bower_components/jquery/dist/jquery.js',\n            '<%%= yeoman.app %>/bower_components/lodash/dist/lodash.js',\n            '<%%= yeoman.app %>/bower_components/backbone/backbone.js',\n            '.tmp/scripts/templates.js'\n          ]\n        }\n      }\n    },\n<% } -%>\n<% if (hasCoffee) { -%>\n    coffee: {\n      dist: {\n        files: [{\n          // rather than compiling multiple files here you should\n          // require them into your main .coffee file\n          expand: true,\n          cwd: '<%%= yeoman.app %>/scripts',\n          src: '{,*/}*.coffee',\n          dest: '.tmp/scripts',\n          ext: '.js'\n        }]\n      },\n      test: {\n        files: [{\n          expand: true,\n          cwd: 'test/spec',\n          src: '{,*/}*.coffee',\n          dest: '.tmp/spec',\n          ext: '.js'\n        }]\n      }\n    },\n<% } -%>\n<% if (sassBootstrap) { -%>\n    sass: {\n      options: {\n        sourceMap: true,\n        includePaths: ['app/bower_components']\n      },\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.app %>/styles',\n          src: ['*.{scss,sass}'],\n          dest: '.tmp/styles',\n          ext: '.css'\n        }]\n      },\n      server: {\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.app %>/styles',\n          src: ['*.{scss,sass}'],\n          dest: '.tmp/styles',\n          ext: '.css'\n        }]\n      }\n    },\n<% } -%>\n<% if (includeRequireJS) { -%>\n    requirejs: {\n      dist: {\n        // Options: https://github.com/jrburke/r.js/blob/master/build/example.build.js\n        options: {\n          almond: true,\n\n          replaceRequireScript: [{\n            files: ['<%%= yeoman.dist %>/index.html'],\n            module: 'main'\n          }],\n\n          modules: [{name: 'main'}],\n          baseUrl: '<%%= yeoman.app %>/scripts',\n<% if (hasCoffee) { %>\n          paths: {\n            'main': '../../.tmp/scripts/main'\n          },\n          allowSourceOverwrites: true,\n          mainConfigFile: '.tmp/scripts/main.js', // contains path specifications and nothing else important with respect to config\n<% } else { %>\n          mainConfigFile: '<%%= yeoman.app %>/scripts/main.js', // contains path specifications and nothing else important with respect to config\n<% } %>\n          keepBuildDir: true,\n          dir: '.tmp/scripts',\n\n          optimize: 'none', // optimize by uglify task\n          useStrict: true<% if (templateFramework !== 'handlebars') { %>,\n          wrap: true\n<% } %>\n        }\n      }\n    },\n    uglify: {\n      dist: {\n        files: {\n          '<%%= yeoman.dist %>/scripts/main.js': [\n            '.tmp/scripts/main.js'\n          ]\n        }\n      }\n    },\n<% } else { -%>\n    // not enabled since usemin task does concat and uglify\n    // check index.html to edit your build targets\n    // enable this task if you prefer defining your build targets here\n    /*uglify: {\n      dist: {}\n    },*/\n<% } -%>\n    useminPrepare: {\n      html: '<%%= yeoman.app %>/index.html',\n      options: {\n        dest: '<%%= yeoman.dist %>'\n      }\n    },\n    usemin: {\n      html: ['<%%= yeoman.dist %>/{,*/}*.html'],\n      css: ['<%%= yeoman.dist %>/styles/{,*/}*.css'],\n      options: {\n        dirs: ['<%%= yeoman.dist %>']\n      }\n    },\n    imagemin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.app %>/images',\n          src: '{,*/}*.{png,jpg,jpeg}',\n          dest: '<%%= yeoman.dist %>/images'\n        }]\n      }\n    },\n    cssmin: {\n      dist: {\n        files: {\n          '<%%= yeoman.dist %>/styles/main.css': [\n            '.tmp/styles/{,*/}*.css',\n            '<%%= yeoman.app %>/styles/{,*/}*.css'\n          ]\n        }\n      }\n    },\n    htmlmin: {\n      dist: {\n        options: {\n          /*removeCommentsFromCDATA: true,\n          // https://github.com/yeoman/grunt-usemin/issues/44\n          //collapseWhitespace: true,\n          collapseBooleanAttributes: true,\n          removeAttributeQuotes: true,\n          removeRedundantAttributes: true,\n          useShortDoctype: true,\n          removeEmptyAttributes: true,\n          removeOptionalTags: true*/\n        },\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.app %>',\n          src: '*.html',\n          dest: '<%%= yeoman.dist %>'\n        }]\n      }\n    },\n    copy: {\n      dist: {\n        files: [{\n          expand: true,\n          dot: true,\n          cwd: '<%%= yeoman.app %>',\n          dest: '<%%= yeoman.dist %>',\n          src: [\n            '*.{ico,txt}',\n            'images/{,*/}*.{webp,gif}',\n            'styles/fonts/{,*/}*.*',\n<% if (sassBootstrap) { -%>\n            'bower_components/bootstrap-sass-official/assets/fonts/bootstrap/*.*'\n<% } -%>\n          ]\n        }, {\n          src: 'node_modules/apache-server-configs/dist/.htaccess',\n          dest: '<%%= yeoman.dist %>/.htaccess'\n        }]\n      }\n    },\n<% if (includeRequireJS) { -%>\n    bower: {\n      all: {\n        rjsConfig: '<%%= yeoman.app %>/scripts/main.js'\n      }\n    },\n<% } -%>\n<% if (templateFramework === 'mustache') { -%>\n    mustache: {\n      files: {\n        src: '<%%= yeoman.app %>/scripts/templates/',\n        dest: '.tmp/scripts/templates.js',\n        options: {\n<%   if (includeRequireJS) { -%>\n          prefix: 'define(function() { this.JST = ',\n          postfix: '; return this.JST;});'\n<%   } else { -%>\n          prefix: 'this.JST = ',\n          postfix: ';'\n<%   } -%>\n        }\n      }\n    }\n<% } else if (templateFramework === 'handlebars') { -%>\n    handlebars: {\n      compile: {\n        options: {\n<%   if (includeRequireJS) { -%>\n          amd: true,\n<%   } -%>\n          namespace: 'JST'\n        },\n        files: {\n          '.tmp/scripts/templates.js': ['<%%= yeoman.app %>/scripts/templates/*.hbs']\n        }\n      }\n    },\n<% } else { -%>\n    jst: {\n<%   if (includeRequireJS) { -%>\n      options: {\n        amd: true\n      },\n<%   } -%>\n      compile: {\n        files: {\n          '.tmp/scripts/templates.js': ['<%%= yeoman.app %>/scripts/templates/*.ejs']\n        }\n      }\n    },\n<% } -%>\n    rev: {\n      dist: {\n        files: {\n          src: [\n            '<%%= yeoman.dist %>/scripts/{,*/}*.js',\n            '<%%= yeoman.dist %>/styles/{,*/}*.css',\n            '<%%= yeoman.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp}',\n            '<%%= yeoman.dist %>/styles/fonts/{,*/}*.*',\n<% if (sassBootstrap) { -%>\n            'bower_components/bootstrap-sass-official/assets/fonts/bootstrap/*.*'\n<% } -%>\n          ]\n        }\n      }\n    }\n  });\n\n  grunt.registerTask('createDefaultTemplate', function () {\n    grunt.file.write('.tmp/scripts/templates.js', 'this.JST = this.JST || {};');\n  });\n\n  grunt.registerTask('server', function (target) {\n    grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');\n    grunt.task.run(['serve' + (target ? ':' + target : '')]);\n  });\n\n  grunt.registerTask('serve', function (target) {\n    if (target === 'dist') {\n      return grunt.task.run(['build', 'open:server', 'connect:dist:keepalive']);\n    }\n\n    if (target === 'test') {\n      return grunt.task.run([\n        'clean:server',\n<% if (hasCoffee) { -%>\n        'coffee',\n<% } -%>\n        'createDefaultTemplate',\n<% if (templateFramework === 'mustache' ) { -%>\n        'mustache',\n<% } else if (templateFramework === 'handlebars') { -%>\n        'handlebars',\n<% } else { -%>\n        'jst',\n<% } -%>\n<% if (sassBootstrap) { -%>\n        'sass:server',\n<% } -%>\n        'connect:test',\n        'open:test',\n        'watch'\n      ]);\n    }\n\n    grunt.task.run([\n      'clean:server',\n<% if (hasCoffee) { -%>\n      'coffee:dist',\n<% } -%>\n      'createDefaultTemplate',\n<% if (templateFramework === 'mustache') { -%>\n      'mustache',\n<% } else if (templateFramework === 'handlebars') { -%>\n      'handlebars',\n<% } else { -%>\n      'jst',\n<% } -%>\n<% if (sassBootstrap) { -%>\n      'sass:server',\n<% } -%>\n      'connect:livereload',\n      'open:server',\n      'watch'\n    ]);\n  });\n\n  grunt.registerTask('test', function (isConnected) {\n    isConnected = Boolean(isConnected);\n    var testTasks = [\n        'clean:server',\n<% if (hasCoffee) { -%>\n        'coffee',\n<% } -%>\n        'createDefaultTemplate',\n<% if (templateFramework === 'mustache' ) { -%>\n        'mustache',\n<% } else if (templateFramework === 'handlebars') { -%>\n        'handlebars',\n<% } else { -%>\n        'jst',\n<% } -%>\n<% if (sassBootstrap) { -%>\n        'sass',\n<% } -%>\n<% if(testFramework === 'mocha') { -%>\n        'connect:test',\n        'mocha'\n<% } else { -%>\n        'jasmine'\n<% } -%>\n      ];\n\n    if(!isConnected) {\n      return grunt.task.run(testTasks);\n    } else {\n      // already connected so not going to connect again, remove the connect:test task\n      testTasks.splice(testTasks.indexOf('connect:test'), 1);\n      return grunt.task.run(testTasks);\n    }\n  });\n\n  grunt.registerTask('build', [\n    'clean:dist',\n<% if (hasCoffee) { -%>\n    'coffee',\n<% } -%>\n    'createDefaultTemplate',\n<% if (templateFramework === 'mustache' ) { -%>\n    'mustache',\n<% } else if (templateFramework === 'handlebars') { -%>\n    'handlebars',\n<% } else { -%>\n    'jst',\n<% } -%>\n<% if (sassBootstrap) { -%>\n    'sass:dist',\n<% } -%>\n    'useminPrepare',\n    'imagemin',\n    'htmlmin',\n    'concat',\n    'cssmin',\n<% if (includeRequireJS) { -%>\n    'requirejs',\n<% } -%>\n    'uglify',\n    'copy',\n    'rev',\n    'usemin'\n  ]);\n\n  grunt.registerTask('default', [\n    'jshint',\n    'test',\n    'build'\n  ]);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/app/templates/requirejs_app.js":"/*global require*/\n'use strict';\n\nrequire.config({\n  shim: {\n<% if (sassBootstrap) { -%>\n    bootstrap: {\n      deps: ['jquery'],\n      exports: 'jquery'\n    },\n<% } -%>\n<% if (templateFramework === 'handlebars') { -%>\n      handlebars: {\n      exports: 'Handlebars'\n    }\n<% } -%>\n  },\n  paths: {\n    jquery: '../bower_components/jquery/dist/jquery',\n    backbone: '../bower_components/backbone/backbone',\n    underscore: '../bower_components/lodash/dist/lodash'<% if (sassBootstrap) { -%>,\n    bootstrap: '../bower_components/bootstrap-sass-official/assets/javascripts/bootstrap'<% } -%><% if (templateFramework === 'handlebars') { -%>,\n    handlebars: '../bower_components/handlebars/handlebars'\n<% } -%>\n  }\n});\n\nrequire([\n  'backbone'\n], function (Backbone) {\n  Backbone.history.start();\n});\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/templates/requirejs/collection.js":"/*global define*/\n\ndefine([\n  'underscore',\n  'backbone',\n  'models/<%= className %>'\n], function (_, Backbone, <%= className %>Model) {\n  'use strict';\n\n  var <%= className %>Collection = Backbone.Collection.extend({\n    model: <%= className %>Model\n  });\n\n  return <%= className %>Collection;\n});\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/templates/requirejs/model.js":"/*global define*/\n\ndefine([\n  'underscore',\n  'backbone'\n], function (_, Backbone) {\n  'use strict';\n\n  var <%= className %>Model = Backbone.Model.extend({\n    url: '',\n\n    initialize: function() {\n    },\n\n    defaults: {\n    },\n\n    validate: function(attrs, options) {\n    },\n\n    parse: function(response, options)  {\n      return response;\n    }\n  });\n\n  return <%= className %>Model;\n});\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/templates/requirejs/router.js":"/*global define*/\n\ndefine([\n  'jquery',\n  'backbone'\n], function ($, Backbone) {\n  'use strict';\n\n  var <%= className %>Router = Backbone.Router.extend({\n    routes: {\n    }\n\n  });\n\n  return <%= className %>Router;\n});\n","/home/travis/build/npmtest/node-npmtest-generator-backbone/node_modules/generator-backbone/generators/templates/requirejs/view.js":"/*global define*/\n\ndefine([\n  'jquery',\n  'underscore',\n  'backbone',\n  'templates'\n], function ($, _, Backbone, JST) {\n  'use strict';\n\n  var <%= className %>View = Backbone.View.extend({\n    template: JST['<%= jst_path %>'],\n\n    tagName: 'div',\n\n    id: '',\n\n    className: '',\n\n    events: {},\n\n    initialize: function () {\n      this.listenTo(this.model, 'change', this.render);\n    },\n\n    render: function () {\n      this.$el.html(this.template(this.model.toJSON()));\n    }\n  });\n\n  return <%= className %>View;\n});\n"}